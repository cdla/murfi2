% log = readRtFeedbackLog(logfile, outdir, outprefix)
%
% read the logile generated by murfi
%
% logfile   the name of the realtime log file (example: log.rtl)
% outdir    an optional argument specifying a directory to write
%           text files of the resulting sessions to
% outprefix optional prefix for each of the files writen

function log = readRtFeedbackLog(logfile, outdir)

  if(exist('outdir','var'))
    writeout = true;
    if(~exist('outprefix','var'))
      outprefix = '';
    end
  else
    writeout = false;
  end

  log = [];
  cur_sess = 0;

  fp = fopen(logfile);
  if(fp == -1)
    error(['couldnt open logfile: ' logfile]);
  end

  % read the sessions
  while(~feof(fp))
    s = fscanf(fp,'%s',1);

    if(strcmp(s,'initialization')) % start of new sess
      cur_sess = cur_sess+1;
      log(cur_sess).names = {};
      log(cur_sess).act = [];

    elseif(strcmp(s,'RtRoiCombine:'))
      % read type and tr
      roi = fscanf(fp,'%s',1);
      roi_ind = strmatch(roi,log(cur_sess).names);
      if(isempty(roi_ind))
	log(cur_sess).names{end+1} = roi;
	roi_ind = strmatch(roi,log(cur_sess).names);
      end

      s = fscanf(fp,'%s',1); % at
      s = fscanf(fp,'%s',1); % tr
      s = fscanf(fp,'%s',1); % tr

      % convert to number
      [tr ok] = str2num(s);
      if(~ok)
	error(['error in parsing log file, i thought tr was ' s]);
      end

      s = fscanf(fp,'%s',1); % result
      s = fscanf(fp,'%s',1); % is:

      % read the activation
      s = fscanf(fp,'%s',1);
      [act ok] = str2num(s);
      if(~ok)
	error(['error in parsing log file, i thought activation was ' act]);
      end

      % store it
      log(cur_sess).act(roi_ind,tr) = act;

    end
  end
  fclose(fp);

  % write file?
  if(writeout)
    for(sess=1:numel(log))
      for(roi=1:numel(log(sess).names))
	act = log(sess).act(roi,:)';
	savename = sprintf('%s/%ssess_%d_%s.txt', outdir, outprefix, ...
			   sess, log(sess).names{roi});
	save(savename,'act','-ASCII');
      end
    end
  end

return
